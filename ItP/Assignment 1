// C language

#include <stdio.h>
#include <string.h>

/*The allValid function checks whether the S string contains valid characters.
 *We pass the string S itself and its length to the function.
 *The function goes along the S string and checks each character for validity.
 *allValid will return 1 if all characters are valid and 0 if there are illegal characters*/
int allValid(char S[], int N) {
    char validSymbols[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ()*!@#$%&^0123456789";

    for (int i = 0; i < N; i++) {
        if (strchr(validSymbols, S[i]) == NULL) {
            return 0;
        }
    }

    return 1;
}

/*The uniqueness function checks whether all elements of array A are different.
 *We pass array A itself and its length to the function.
 *The function uses a nested loop to compare all elements with each other.
 *uniqueness will return 1 if all elements are different and 0 if there are repetitions*/
int uniqueness(int M, int A[M]) {
    for (int i = 0; i < M; i++) {
        for (int j = i; j < M; j++) {
            if ((i != j) && (A[i] == A[j])) {
                return 0;
            }
        }
    }

    return 1;
}

/*The maxOfArray function is designed to search for an element in array A as much as possible.
 *We pass the array itself and its length.
 *The function goes through each element of the array and compares it with the max variable.
 *maxOfArray will return the maximum element of the array.*/
int maxOfArray(int M, int A[M]) {
    int max = A[0];

    for (int i = 0; i < M; i++) {
        if (A[i] > max) {
            max = A[i];
        }
    }

    return max;
}

/*the bordersOfArray function checks whether each element of array A lies within the boundaries(not less than 1 and not more than 26).
 *We pass the array itself and its length.
 *The function goes through each element of the array and checks whether it belongs to the range.
 *bordersOfArray will return 1 if all elements are valid and 0 if not.*/
int bordersOfArray(int M, int A[M]) {
    for (int i = 0; i < M; i++) {
        if ((A[i] > 26) || (A[i] < 1)) {
            return 0;
        }
    }

    return 1;
}

/*The min function is designed to calculate the minimum value from two data.
 *We are passing two integers.
 *The function compares these two numbers and returns the minimum of them.*/
int min(int a, int b) {
    if (a <= b) {
        return a;
    } else {
        return b;
    }
}

int main() {
    /*open the file "input.txt" for reading*/
    FILE *f = fopen("input.txt", "r");

    /*we check whether the file is incorrect. In this case, write "Invalid inputs" to the file "output.txt" and finish the program.*/
    if (f == NULL) {
        fclose(f);
        FILE *fout = fopen("output.txt", "w");
        fprintf(fout, "Invalid inputs\n");
        fclose(fout);
        return 1;
    }

    int N, M;
    char S[10001], lang[] = "abcdefghijklmnopqrstuvwxyz";

    /*using "fscanf()" we read data from the input file*/
    fscanf(f, "%d", &N);
    fscanf(f, "%s", &S);
    fscanf(f, "%d", &M);

    int A[M];

    for (int i = 0; i < M; i++) {
        fscanf(f, "%d", &A[i]);
    }

    /*close the input file, since we will no longer need it*/
    fclose(f);

    /*the variable "flag" will be used to indicate the correctness of the input data*/
    int flag = 0;

    /*Below is a block checking the correctness of the input data.
     *Each function created for verification will return 1 if the data is correct and 0 if the data is incorrect.
     *We also check:
        1) does Length of A, denoted as M lie within acceptable limits([1; min(N â 1, 26)])
        2) The maximum element of array A must be less than N.
        3) Does N lie within acceptable limits ([2; 50])
     *If all checks are successful and the data is correct, the variable "flag" is equal to one*/
    if ((strlen(S) == N) && (allValid(S, N) == 1) && (M >= 1) && (M <= min(N - 1, 26))) {
        if ((uniqueness(M, A) == 1) && (maxOfArray(M, A) < N)) {
            if ((bordersOfArray(M, A) == 1) && (2 <= N) && (N <= 50)) {
                flag = 1;
            }
        }
    }

    /*If the data is correct, we use an algorithm to replace the characters of this string with characters of the alphabet.
     *The algorithm works like this:
        1) Starts going through array A and gets its values,
            which are equal to the index of the character in the line
            that needs to be changed and the serial number of the letter in the alphabet.
        2) when receiving a value from element A, a nested loop begins,
            which goes along the line until it encounters a character with an index equal to the value of A[i].
        3) Replaces a string character with a letter with a serial number (j - 1)*/
    if (flag == 1) {
        for (int i = 0; i < M; i++) {
            for (int j = 0; j <= N; j++) {
                if (A[i] == j) {
                    S[j] = lang[j - 1];
                }
            }
        }

        /*After working out the algorithm, we open the file "output.txt" for writing and write the resulting modified string into it. Next, close the file.*/
        FILE *fout = fopen("output.txt", "w");
        fprintf(f, "%s\n", S);
        fclose(fout);
    } else {
        /*if "flag" is equal to 0, that is, the input data is incorrect, open the file "output.txt" for writing and write "Invalid inputs". Next, close the file*/
        FILE *fout = fopen("output.txt", "w");
        fprintf(f, "Invalid inputs\n");
        fclose(fout);
    }

    return 0;
}
