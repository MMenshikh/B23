// C++ language

#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <sstream>

using namespace std;

class Matrix
{
public:
    int rows;
    int columns;
    vector<vector<double>> info;
public:
    Matrix(int n, int m)
        : rows(n), columns(m)
    {
        info.resize(n, vector<double>(m, 0));
    }

    virtual void input()
    {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                cin >> info[i][j];
            }
        }
    }

    Matrix operator+(const Matrix &other)
    {
        if (rows != other.rows || columns != other.columns) {
            Matrix errorMatrix(666, 666);
            return errorMatrix;
        }

        Matrix result(rows, columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.info[i][j] = info[i][j] + other.info[i][j];
            }
        }

        return result;
    }

    Matrix operator-(const Matrix &other)
    {
        if (rows != other.rows || columns != other.columns) {
            Matrix errorMatrix(666, 666);
            return errorMatrix;
        }

        Matrix result(rows, columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.info[i][j] = info[i][j] - other.info[i][j];
            }
        }

        return result;
    }

    Matrix operator*(const Matrix &other)
    {
        if (columns != other.rows) {
            Matrix errorMatrix(666, 666);
            return errorMatrix;
        }

        Matrix result(rows, other.columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < other.columns; j++) {
                for (int k = 0; k < columns; k++) {
                    result.info[i][j] += info[i][k] * other.info[k][j];
                }
            }
        }

        return result;
    }

    Matrix &operator=(const Matrix &other)
    {
        if (&other == this) return *this;

        rows = other.rows;
        columns = other.columns;
        info = other.info;

        return *this;
    }

    virtual void transpose()
    {
        vector<vector<double>> transposedInfo(columns, vector<double>(rows, 0));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                transposedInfo[j][i] = info[i][j];
            }
        }
        swap(rows, columns);
        info = transposedInfo;
    }

    virtual void output()
    {
        if (rows != 666 && columns != 666) {
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < columns; ++j) {
                    if (info[i][j] == -0) {
                        cout << 0.0000;
                    }
                    else {
                        cout << setprecision(4) << fixed << info[i][j];
                    }
                    if (j < columns - 1) {
                        cout << " ";
                    }
                }
                cout << endl;
            }
        }
        else {
            cout << "Error: the dimensional problem occurred\n";
        }
    }

    virtual Matrix inverse()
    {
        if (rows != columns) {
            cout << "Error: the dimensional problem occurred\n";
            return Matrix(0, 0);
        }

        Matrix augmented(rows, 2 * columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                augmented.info[i][j] = info[i][j];
            }
            augmented.info[i][i + columns] = 1.0;
        }

        for (int i = 0; i < rows; i++) {
            int maxRow = i;
            for (int j = i + 1; j < rows; j++) {
                if (abs(augmented.info[j][i]) > abs(augmented.info[maxRow][i])) {
                    maxRow = j;
                }
            }

            if (abs(augmented.info[maxRow][i]) < 1e-9) {
                cout << "Error: Matrix A is singular\n" << endl;
                return Matrix(0, 0);
            }
        }


        for (int i = 0; i < rows; i++) {
            int maxRow = i;
            for (int j = i + 1; j < rows; j++) {
                if (abs(augmented.info[j][i]) > abs(augmented.info[maxRow][i])) {
                    maxRow = j;
                }
            }

            if (abs(augmented.info[maxRow][i]) < 1e-9) {
                cout << "Error: Matrix A is singular\n" << endl;
                return Matrix(0, 0);
            }

            if (maxRow != i) {
                swap(augmented.info[i], augmented.info[maxRow]);
            }

            for (int j = i + 1; j < rows; j++) {
                vector<vector<double>> temp = augmented.info;

                double factor = augmented.info[j][i] / augmented.info[i][i];
                for (int k = i; k < 2 * columns; k++) {
                    augmented.info[j][k] -= factor * augmented.info[i][k];
                }
            }
        }

        for (int i = rows - 1; i > 0; i--) {
            for (int j = i - 1; j >= 0; j--) {
                vector<vector<double>> temp = augmented.info;

                double factor = augmented.info[j][i] / augmented.info[i][i];
                for (int k = i; k < 2 * columns; k++) {
                    augmented.info[j][k] -= factor * augmented.info[i][k];
                }
            }
        }

        for (int i = 0; i < rows; i++) {
            double factor = augmented.info[i][i];
            for (int j = i; j < 2 * columns; j++) {
                augmented.info[i][j] /= factor;
            }
        }

        Matrix result(rows, columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.info[i][j] = augmented.info[i][j + columns];
            }
        }

        return result;
    }
};

class SquareMatrix: public Matrix
{
public:
    explicit SquareMatrix(int n)
        : Matrix(n, n)
    {}

    void input() override
    {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                cin >> info[i][j];
            }
        }
    }

    void output() override
    {
        if (rows != 666 && columns != 666) {
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < columns; ++j) {
                    cout << setprecision(2) << fixed << info[i][j];
                    if (j < columns - 1) {
                        cout << " ";
                    }
                }
                cout << endl;
            }
        }
        else {
            cout << "Error: the dimensional problem occurred\n";
        }
    }

    Matrix *operator+(Matrix &other)
    {
        if (rows != other.rows || columns != other.columns) {
            auto *errorMatrix = new SquareMatrix(666);
            return errorMatrix;
        }
        auto *result = new SquareMatrix(rows);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < columns; ++j) {
                result->info[i][j] = info[i][j] + dynamic_cast<SquareMatrix *>(&other)->info[i][j];
            }
        }
        return result;
    }

    Matrix *operator-(Matrix &other)
    {
        if (rows != other.rows || columns != other.columns) {
            auto *errorMatrix = new SquareMatrix(666);
            return errorMatrix;
        }
        auto *result = new SquareMatrix(rows);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < columns; ++j) {
                result->info[i][j] = info[i][j] - dynamic_cast<SquareMatrix *>(&other)->info[i][j];
            }
        }
        return result;
    }

    Matrix *operator*(Matrix &other)
    {
        if (columns != other.rows) {
            auto *errorMatrix = new SquareMatrix(666);
            return errorMatrix;
        }

        auto *result = new SquareMatrix(rows);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < rows; ++j) {
                for (int k = 0; k < columns; ++k) {
                    result->info[i][j] += info[i][k] * dynamic_cast<SquareMatrix *>(&other)->info[k][j];
                }
            }
        }
        return result;
    }

    void transpose() override
    {
        vector<vector<double>> transposedInfo(columns, vector<double>(rows, 0));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                transposedInfo[j][i] = info[i][j];
            }
        }
        swap(rows, columns);
        info = transposedInfo;
    }

    double determinant() const
    {
        if (rows == columns && rows == 2) {
            double det = info[0][0] * info[1][1] - info[0][1] * info[1][0];
            return det;
        }

        if (rows != columns) {
            cout << "Error: the dimensional problem occurred\n";
            return 0.0;
        }

        SquareMatrix temp = *this;
        double det = 1.0;

        for (int i = 0; i < rows - 1; i++) {
            int maxRow = i;
            for (int j = i + 1; j < rows; j++) {
                if (abs(temp.info[j][i]) > abs(temp.info[maxRow][i])) {
                    maxRow = j;
                }
            }

            if (maxRow != i) {
                swap(temp.info[i], temp.info[maxRow]);
                det *= -1.0;
            }

            for (int j = i + 1; j < rows; j++) {
                double ratio = temp.info[j][i] / temp.info[i][i];
                for (int k = i; k < rows; k++) {
                    temp.info[j][k] -= ratio * temp.info[i][k];
                }
            }
        }

        for (int i = 0; i < rows; i++) {
            det *= temp.info[i][i];
        }

        return det;
    }

    Matrix inverse() override
    {
        if (rows != columns) {
            cout << "Error: the dimensional problem occurred\n";
            return Matrix(0, 0);
        }

        Matrix augmented(rows, 2 * columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                augmented.info[i][j] = info[i][j];
            }
            augmented.info[i][i + columns] = 1.0;
        }

        for (int i = 0; i < rows; i++) {
            int maxRow = i;
            for (int j = i + 1; j < rows; j++) {
                if (abs(augmented.info[j][i]) > abs(augmented.info[maxRow][i])) {
                    maxRow = j;
                }
            }

            if (abs(augmented.info[maxRow][i]) < 1e-9) {
                cout << "Error: Matrix A is singular\n" << endl;
                return Matrix(0, 0);
            }
        }


        for (int i = 0; i < rows; i++) {
            int maxRow = i;
            for (int j = i + 1; j < rows; j++) {
                if (abs(augmented.info[j][i]) > abs(augmented.info[maxRow][i])) {
                    maxRow = j;
                }
            }

            if (abs(augmented.info[maxRow][i]) < 1e-9) {
                cout << "Error: Matrix A is singular\n" << endl;
                return Matrix(0, 0);
            }

            if (maxRow != i) {
                swap(augmented.info[i], augmented.info[maxRow]);
            }

            for (int j = i + 1; j < rows; j++) {
                vector<vector<double>> temp = augmented.info;

                double factor = augmented.info[j][i] / augmented.info[i][i];
                for (int k = i; k < 2 * columns; k++) {
                    augmented.info[j][k] -= factor * augmented.info[i][k];
                }
            }
        }

        for (int i = rows - 1; i > 0; i--) {
            for (int j = i - 1; j >= 0; j--) {
                vector<vector<double>> temp = augmented.info;

                double factor = augmented.info[j][i] / augmented.info[i][i];
                for (int k = i; k < 2 * columns; k++) {
                    augmented.info[j][k] -= factor * augmented.info[i][k];
                }
            }
        }

        for (int i = 0; i < rows; i++) {
            double factor = augmented.info[i][i];
            for (int j = i; j < 2 * columns; j++) {
                augmented.info[i][j] /= factor;
            }
        }

        Matrix result(rows, columns);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                result.info[i][j] = augmented.info[i][j + columns];
            }
        }

        return result;
    }
};

class IdentityMatrix: public SquareMatrix
{
public:
    explicit IdentityMatrix(int n)
        : SquareMatrix(n)
    {
        for (int i = 0; i < n; ++i) {
            info[i][i] = 1;
        }
    }
};

class EliminationMatrix: public SquareMatrix
{
public:
    EliminationMatrix(SquareMatrix &other, int n, int i, int j)
        : SquareMatrix(n)
    {
        IdentityMatrix I(n);
        I.info[i - 1][j - 1] = -(other.info[i - 1][j - 1] / other.info[i - 2][j - 1]);

        info = I.info;
    }
};

class PermutationMatrix: public SquareMatrix
{
public:
    explicit PermutationMatrix(int n, int i, int j)
        : SquareMatrix(n)
    {
        IdentityMatrix I(n);
        I.info[i - 1][i - 1] = 0;
        I.info[j - 1][j - 1] = 0;
        I.info[j - 1][i - 1] = 1;
        I.info[i - 1][j - 1] = 1;

        info = I.info;
    }
};

class lsaMatrix: public Matrix
{
public:
    vector<double> b;
    explicit lsaMatrix(int m)
        : Matrix(m, 2)
    {}

    void input()
    {
        string str;
        vector<vector<string>> lines;


        for (int _ = 0; _ <= rows; _++) {
            getline(cin, str);
            stringstream stream(str);
            string value;
            vector<string> line = {};

            while (stream >> value) {
                line.push_back(value);
            }

            lines.push_back(line);
        }

        for (int i = 1; i <= rows; i++) {
            vector<string> line = lines[i];

            info[i - 1] = {1, stod(line[0])};
            b.push_back(stod(line[1]));
        }
    }

    void extendInfo(int n)
    {
        n--;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < rows; j++) {
                info[j].push_back(pow(info[j][1], i + 2));
            }
            columns += 1;
        }
    }
};

int main()
{
    int m;
    cin >> m;
    lsaMatrix *A = new lsaMatrix(m);
    A->input();

    int n;
    cin >> n;
    A->extendInfo(n);


    cout << "A:" << endl;
    A->output();

    cout << "A_T*A:" << endl;
    Matrix *AT = new Matrix(A->rows, A->columns);
    AT->info = A->info;
    AT->transpose();

    Matrix ATA = *AT * *A;
    ATA.output();

    cout << "(A_T*A)^-1:" << endl;
    Matrix inverseATA = ATA.inverse();
    inverseATA.output();

    cout << "A_T*b:" << endl;
    Matrix *b = new Matrix(A->b.size(), 1);
    vector<vector<double>> new_b;
    for (auto a: A->b) {
        new_b.push_back({a});
    }
    b->info = new_b;
    Matrix ATb = *AT * *b;
    ATb.output();

    cout << "x~:" << endl;
    Matrix x = inverseATA * *AT * *b;
    x.output();

    return 0;
}
