# Python Language
# Нихуя не работает ебаный рот того питона 🖕🖕🖕🖕🖕🖕🖕 сука дебильность ебаная не успел еще нихуя блять в дедлайн пизда че теперь делать лол)
# лан лейт сабмишн всего -20% :)))
# то что ниже - работает
def typeCheck(type):
    flag = False
    if type[:6] == "type=[" and type[-1] == ']':
        flag = True
        type = type[6:-1]
        if type != "deterministic" and type != "non-deterministic":
            flag = False
    return flag


def stateCheck(state):
    flag = False
    if state[:8] == "states=[" and state[-1] == ']' and state[-2] != ',':
        flag = True
        state = state[8:-1]
        if state == '':
            flag = False
    return flag


def alphabetCheck(alphabet):
    flag = False
    if alphabet[:10] == "alphabet=[" and alphabet[-1] == ']' and alphabet[-2] != ',':
        flag = True
        alphabet = alphabet[10:-1]
        if alphabet == '':
            flag = False
    return flag


def initialCheck(initial, states):
    if initial[:9] == "initial=[" and initial[-1] == ']' and initial[-2] != ',':
        initial = initial[9:-1]
        if initial != '':
            initial = sorted(list(set(initial.split(','))))
            for i in initial:
                if i not in states:
                    print(f"E4: A state '{i}' is not in the set of states")
                    return False
            return True
        else:
            print("E2: Initial state is not defined")
            return False
    else:
        print("E1: Input file is malformed")
        return False


def acceptingCheck(accepting, states):
    if accepting[:11] == "accepting=[" and accepting[-1] == ']' and accepting[-2] != ',':
        accepting = accepting[11:-1]
        if accepting != '':
            accepting = sorted(list(set(accepting.split(','))))
            for i in accepting:
                if i not in states:
                    print(f"E4: A state '{i}' is not in the set of states")
                    return False
            return True
        else:
            print("E3: Set of accepting states is empty")
            return False
    else:
        print("E1: Input file is malformed")
        return False


def transitionCheck(transition, states, alphabet):
    if transition[:13] == 'transitions=[' and transition[-1] == ']' and transition[-2] != ',':
        transition = transition[13:-1]
        if transition != '':
            transition = transition.split(',')
            if len(transition) == len(list(set(transition))):
                for i in range(len(transition)):
                    transition[i] = transition[i].split('>')
                    if transition[i][1] not in alphabet:
                        if transition[i][1]:
                            print(f"E5: A transition '{transition[i][1]}' is not represented in the alphabet")
                            return False
                        else:
                            print("E1: Input file is malformed")
                            return False
                    if transition[i][0] not in states:
                        if transition[i][0]:
                            print(f"E4: A state '{transition[i][0]}' is not in the set of states")
                            return False
                        else:
                            print("E1: Input file is malformed")
                            return False
                    if transition[i][2] not in states:
                        if transition[i][2]:
                            print(f"E4: A state '{transition[i][2]}' is not in the set of states")
                            return False
                        else:
                            print("E1: Input file is malformed")
                            return False
                return True
            else:
                print("E1: Input file is malformed")
                return False
        else:
            print("E1: Input file is malformed")
            return False

    else:
        print("E1: Input file is malformed")
        return False


def dfs(n, v, g):
    if n in v:
        return
    else:
        v.add(n)
        for near in g.get(n, []):
            dfs(near, v, g)


def available(g, s):
    v = set()

    dfs(s, v, g)

    if len(v) == len(g):
        return True
    else:
        return False


def disjointCheck(states, transition, initial):
    d = {}
    for i in states:
        d[i] = []
    for i in transition:
        d[i[0]].append(i[2])
    if available(d, initial[0]):
        return True

    return False


def deterministicCheck(state, transition):
    transitions = {}
    for i in state:
        transitions[i] = []
    for i in transition:
        transitions[i[0]].append(i[1])
    for i in transitions.keys():
        trans = transitions[i]
        if len(trans) != len(list(set(trans))):
            return False
    return True


def main(data):
    type = data[0]
    if typeCheck(type):
        type = type[6:-1]
    else:
        print("E1: Input file is malformed")
        return
    state = data[1]
    if stateCheck(state):
        state = state[8:-1]
        states = sorted(list(set(state.split(','))))
    else:
        print("E1: Input file is malformed")
        return
    available_states = {}
    for i in range(len(states)):
        available_states[states[i]] = i

    alphabet = data[2]
    if alphabetCheck(alphabet):
        alphabet = sorted(list(set(alphabet[10:-1].split(','))))
    else:
        print("E1: Input file is malformed")
        return
    initial = data[3]
    if initialCheck(initial, states):
        initial = sorted(list(set(initial[9:-1].split(','))))
    else:
        return
    accepting = data[4]
    if acceptingCheck(accepting, states):
        accepting = sorted(list(set(accepting[11:-1].split(','))))
    else:
        return
    transition = data[5]

    if transitionCheck(transition, states, alphabet):
        transition = sorted(list(set(transition[13:-1].split(','))))
        for i in range(len(transition)):
            transition[i] = transition[i].split('>')
    else:
        return

    if disjointCheck(states, transition, initial) is False:
        print("E6: Some states are disjoint")
        return

    if type == "deterministic":
        if deterministicCheck(states, transition) is False:
            print("E7: FSA is non-deterministic")
            return

    transesFromTo = {}
    output = [[["" for k in range(len(states))] for j in range(len(states))] for i in range(len(states) + 1)]
    for i in transition:
        if i[0] + " " + i[2] not in transesFromTo:
            transesFromTo[i[0] + " " + i[2]] = []
        transesFromTo[i[0] + " " + i[2]].append(i[1])
    for i in range(len(states)):
        for j in range(len(states)):
            s = states[i] + " " + states[j]
            if s in transesFromTo:
                line = ''
                for k in sorted(transesFromTo[s]):
                    line += k + '|'
                line = line[:-1]
                if i == j:
                    line += "|eps"
                output[0][i][j] = line
            elif i == j:
                output[0][i][j] = "eps"
            else:
                output[0][i][j] = "{}"
    for i in range(1, len(output)):
        for j in range(len(output[i])):
            for k in range(len(output[i][j])):
                output[i][j][k] = '(' + output[i - 1][j][i - 1] + ')' + '(' + output[i - 1][i - 1][i - 1] + ")*" + '(' + \
                                  output[i - 1][i - 1][k] + ")|(" + output[i - 1][j][k] + ')'
    stateFrom = available_states[initial[0]]
    out = ""
    for i in accepting:
        stateTo = available_states[i]
        out += output[len(states)][stateFrom][stateTo] + '|'
    out = out[:-1]
    print('(' + out + ')')


data = [i.strip() for i in open("input.txt", 'r').readlines()]
main(data)
