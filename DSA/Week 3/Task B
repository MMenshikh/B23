// Java language

// Maksim Menshikh

import java.util.ArrayList;
import java.util.Scanner;

import static java.lang.Math.abs;


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Map<String, Integer> map = new HashMap<>(100000);

        int n = scanner.nextInt();
        ArrayList<String> first_words = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            first_words.add(scanner.next());
        }

        int m = scanner.nextInt();
        ArrayList<String> second_words = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            second_words.add(scanner.next());
        }

        for (String word : first_words) {
            if (!map.containsKey(word)) {
                map.put(word, 1);
            } else {
                int value = map.get(word);
                map.remove(word);
                map.put(word, value + 1);
            }
        }

        int count = 0;
        ArrayList<String> output = new ArrayList<>();
        for (String word : second_words) {
            if (!map.containsKey(word)) {
                count++;
                output.add(word);
                map.put(word, 1);
            }
        }

        System.out.println(count);
        for (String word : output) {
            System.out.println(word);
        }
    }
}

interface Map<K, V> {
    void put(K key, V value);

    V get(K key);

    void remove(K key);

    boolean containsKey(K key);
}

class HashMap<K, V> implements Map<K, V> {
    private static class Node<K, V> {
        final K key;
        V value;
        Node<K, V> next;

        Node(K key, V value) {
            this.key = key;
            this.value = value;
        }
    }

    private final int capacity;
    private Node<K, V>[] table;

    public HashMap(int capacity) {
        this.capacity = capacity;
        table = new Node[capacity];
    }

    private int hash(K key) {
        return abs(key.hashCode()) % capacity;
    }


    @Override
    public void put(K key, V value) {
        int index = hash(key);
        Node<K, V> newNode = new Node<>(key, value);

        if (table[index] == null) {
            table[index] = newNode;
        } else {
            Node<K, V> current = table[index];
            while (current.next != null) {
                if (current.key.equals(key)) {
                    current.value = value;
                    return;
                }
                current = current.next;
            }
            current.next = newNode;
        }
    }

    @Override
    public V get(K key) {
        int index = hash(key);
        Node<K, V> current = table[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return current.value;
            }
            current = current.next;
        }
        return null;
    }

    @Override
    public void remove(K key) {
        int index = hash(key);
        Node<K, V> current = table[index];
        Node<K, V> prev = null;

        while (current != null) {
            if (current.key.equals(key)) {
                if (prev == null) {
                    table[index] = current.next;
                } else {
                    prev.next = current.next;
                }
                return;
            }
            prev = current;
            current = current.next;
        }
    }

    @Override
    public boolean containsKey(K key) {
        int index = hash(key);
        Node<K, V> current = table[index];

        while (current != null) {
            if (current.key.equals(key)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
}
