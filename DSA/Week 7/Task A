// C++ language

// Maksim Menshikh

#include <iostream>
#include <algorithm>

using namespace std;

struct AVL
{
    int data;
    struct AVL *left;
    struct AVL *right;
} *r;

class AVLTree
{
public:
    AVLTree()
    {
        r = nullptr;
    }

    int getHeight(AVL *t)
    {
        int h = 0;
        if (t != nullptr) {
            int lHeight = getHeight(t->left);
            int rHeight = getHeight(t->right);
            int maxHeight = max(lHeight, rHeight);
            h = maxHeight + 1;
        }
        return h;
    }
    int difference(AVL *t)
    {
        int lHeight = getHeight(t->left);
        int rHeight = getHeight(t->right);
        int b = lHeight - rHeight;
        return b;
    }
    static AVL *rrRotation(AVL *parent)
    {
        AVL *t;
        t = parent->right;
        parent->right = t->left;
        t->left = parent;
        return t;
    }
    static AVL *llRotation(AVL *parent)
    {
        AVL *t;
        t = parent->left;
        parent->left = t->right;
        t->right = parent;
        return t;
    }
    static AVL *lrRotation(AVL *parent)
    {
        AVL *t;
        t = parent->left;
        parent->left = rrRotation(t);
        return llRotation(parent);
    }
    static AVL *rlRotation(AVL *parent)
    {
        AVL *t;
        t = parent->right;
        parent->right = llRotation(t);
        return rrRotation(parent);
    }
    AVL *balance(AVL *t)
    {
        int b = difference(t);
        if (b > 1) {
            if (difference(t->left) > 0)
                t = llRotation(t);
            else
                t = lrRotation(t);
        }
        else if (b < -1) {
            if (difference(t->right) > 0)
                t = rlRotation(t);
            else
                t = rrRotation(t);
        }
        return t;
    }
    AVL *insert(AVL *r, int value)
    {
        if (r == nullptr) {
            r = new AVL;
            r->data = value;
            r->left = nullptr;
            r->right = nullptr;
            return r;
        }
        else if (value < r->data) {
            r->left = insert(r->left, value);
            r = balance(r);
        }
        else if (value >= r->data) {
            r->right = insert(r->right, value);
            r = balance(r);
        }
        return r;
    }
    void getRoot(AVL *p, int l)
    {
        if (p != nullptr) {
            getRoot(p->right, l + 1);
            if (p == r) {
                cout << p->data;
                return;
            }
            getRoot(p->left, l + 1);
        }
    }
    void displayTree(AVL *t)
    {
        if (t == nullptr)
            return;

        displayTree(t->left);

        int leftValue = (t->left == nullptr) ? -1 : t->left->data;
        int rightValue = (t->right == nullptr) ? -1 : t->right->data;
        cout << t->data << " " << leftValue << " " << rightValue << endl;

        displayTree(t->right);
    }
};

int main()
{
    int n;
    cin >> n;

    AVLTree tree;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        r = tree.insert(r, value);
    }

    cout << n << endl;

    tree.balance(r);
    tree.displayTree(r);
    tree.getRoot(r, 1);

    return 0;
}
