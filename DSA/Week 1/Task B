// Java language

// Maksim Menshikh

import java.util.Scanner;
import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        // we need to create two arrays. First for theyir amounts of score, second for their names + amounts
        Scanner s = new Scanner(System.in);

        int M;
        int N = s.nextInt();
        int K = s.nextInt();
        String[] array = new String[N];


        int[] new_array = new int[N];

        // implement keybord input
        for (int i = 0; i < N; i++) {
            String name = s.next();
            int amount = s.nextInt();

            array[i] = name + " " + amount;

            new_array[i] = amount;
        }

        // use radix sort to sort an array with player's amounts of score
        Radix.radixsort(new_array, N);

        if (K < N) {
            M = K;
        } else {
            M = N;
        }

        int count = 0;
        int is_amount;

        // in this for loops we go through sorted arrays and finds name of player that have that score
        for (int i = N - 1; i >= 0; i--) {
            for (int j = 0; j < N; j++) {
                is_amount = Integer.parseInt(array[j].split(" ")[1]);

                if (new_array[i] == is_amount) {
                    System.out.println(array[j]);
                    count += 1;
                    break;
                }
            }

            if (count >= M) {
                break;
            }
        }
    }
}

// Radix sort Java implementation

class Radix {

    // A utility function to get maximum value in arr[]
    static int getMax(int arr[], int n) {
        int mx = arr[0];
        for (int i = 1; i < n; i++)
            if (arr[i] > mx)
                mx = arr[i];
        return mx;
    }

    // A function to do counting sort of arr[] according to
    // the digit represented by exp.
    static void countSort(int arr[], int n, int exp) {
        int output[] = new int[n]; // output array
        int i;
        int count[] = new int[10];
        Arrays.fill(count, 0);

        // Store count of occurrences in count[]
        for (i = 0; i < n; i++)
            count[(arr[i] / exp) % 10]++;

        // Change count[i] so that count[i] now contains
        // actual position of this digit in output[]
        for (i = 1; i < 10; i++)
            count[i] += count[i - 1];

        // Build the output array
        for (i = n - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }

        // Copy the output array to arr[], so that arr[] now
        // contains sorted numbers according to current
        // digit
        for (i = 0; i < n; i++)
            arr[i] = output[i];
    }

    // The main function to that sorts arr[] of
    // size n using Radix Sort
    static void radixsort(int arr[], int n) {
        // Find the maximum number to know number of digits
        int m = getMax(arr, n);

        // Do counting sort for every digit. Note that
        // instead of passing digit number, exp is passed.
        // exp is 10^i where i is current digit number
        for (int exp = 1; m / exp > 0; exp *= 10)
            countSort(arr, n, exp);
    }
}
